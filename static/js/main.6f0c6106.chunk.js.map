{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["SearchContext","createContext","SearchContextProvider","props","useState","address","setAddress","city","setCity","state","setState","zipcode","setZipcode","providerValue","React","useMemo","Provider","value","children","Nav","useContext","className","mapboxApiAccessToken","onSelected","_","item","data","context","forEach","v","i","id","indexOf","text","short_code","split","street_number","street_name","street_address","parseAddress","hideOnSelect","updateInputOnSelect","viewport","queryParams","country","types","placeholder","placeHolder","SearchForm","query","setQuery","results","setResults","GET_URL","process","func","deps","didMount","useRef","useEffect","current","useDidMountEffect","console","log","fetch","mode","then","res","json","catch","error","onSubmit","e","preventDefault","queryString","URLSearchParams","FormData","target","toString","htmlFor","type","onChange","name","aria-required","required","onClick","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6f0c6106.chunk.js","sourcesContent":["import React, { createContext, useContext, useState, useEffect, useRef } from \"react\";\n//import useAddressPredictions from \"./useAddressPredictions\";\nimport Geocoder from \"react-mapbox-gl-geocoder\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport \"./App.scss\";\n\n// token for address autocomplete search https://github.com/groinder/react-mapbox-gl-geocoder\n//   token is from their demo in https://www.npmjs.com/package/react-map-gl-geocoder\nconst MAPBOX_TOKEN = \"pk.eyJ1Ijoic21peWFrYXdhIiwiYSI6ImNqcGM0d3U4bTB6dWwzcW04ZHRsbHl0ZWoifQ.X9cvdajtPbs9JDMG-CMDsA\";\n// token for fetching home data from estated\nconst ESTATED_TOKEN = process.env.REACT_APP_ESTATED_TOKEN;\n// fix for cors problem\nconst PROXY_URL = \"https://cors-anywhere.herokuapp.com/\";\n\n// CUSTOM HOOKS\nconst useDidMountEffect = (func, deps) => {\n  const didMount = useRef(false);\n\n  useEffect(() => {\n    if (didMount.current) func();\n    else didMount.current = true;\n  }, deps);\n};\n\n// CONTEXTS\nconst SearchContext = createContext();\nconst SearchContextProvider = (props) => {\n  // state variables for estated form search\n  const [address, setAddress] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [state, setState] = useState(\"\");\n  const [zipcode, setZipcode] = useState(\"\");\n\n  const providerValue = React.useMemo(() => ({\n      address, setAddress,\n      city, setCity,\n      state, setState,\n      zipcode, setZipcode\n  }), [address, state, city, zipcode]);\n\n  return (\n    <SearchContext.Provider value={providerValue}>\n      {props.children}\n    </SearchContext.Provider>\n  )\n}\n\n// COMPONENTS\n\n// nav component with address autocomplete search\nconst Nav = () => {\n  const { setAddress, setCity, setState, setZipcode } = useContext(SearchContext);\n\n  // parse address from api json data\n  const parseAddress = data => {\n    let city, state, zipcode;\n    if (data.context) {\n      data.context.forEach((v, i) => {\n        if (v.id.indexOf(\"place\") >= 0) {\n          city = v.text;\n        }\n        if (v.id.indexOf(\"region\") >= 0) {\n          state = v.short_code.split(\"-\")[1];\n        }\n        if (v.id.indexOf(\"postcode\") >= 0) {\n          zipcode = v.text;\n        }\n      });\n    }\n\n    return {\n      street_number: data.address,\n      street_name: data.text,\n      street_address: `${data.address} ${data.text}`,\n      city,\n      state,\n      zipcode\n    };\n  };\n\n  const onSelected = (_, item) => {\n    const data = parseAddress(item);\n    const { street_address, city, state, zipcode } = data;\n    setAddress(street_address);\n    setCity(city);\n    setState(state);\n    setZipcode(zipcode);\n  };\n\n  return (\n    <>\n      <nav className=\"nav\">\n        <div className=\"nav__search-wrapper\">\n          <SearchIcon className=\"nav__search-icon\" />\n          <Geocoder\n            mapboxApiAccessToken={MAPBOX_TOKEN}\n            onSelected={onSelected}\n            hideOnSelect={true}\n            updateInputOnSelect={true}\n            viewport={{}}\n            queryParams={{\n              country: \"us\",\n              types: \"address\"\n            }}\n            className=\"nav__search\"\n            placeholder=\"search\"\n          >\n            <input placeHolder=\"search\" />\n          </Geocoder>\n        </div>\n      </nav>\n    </>\n  )\n};\n\n// search form\nconst SearchForm = () => {\n  const { address, city, state, zipcode } = useContext(SearchContext);\n  const { setAddress, setCity, setState, setZipcode } = useContext(SearchContext);\n\n  // state variables for api\n  const [query, setQuery] = useState(\"\");\n  const [results, setResults] = useState();\n  const GET_URL = `${PROXY_URL}https://apis.estated.com/v4/property?token=${ESTATED_TOKEN}&${query}`;\n\n  useDidMountEffect(() => {\n    console.log('fetch home data', GET_URL);\n    fetch(GET_URL, { mode: \"cors\" })\n      .then(res => res.json())\n      .then(data => {\n        console.log(\">> data fetched\", data);\n        setResults([data]);\n      })\n      .catch(error => {\n        console.log(\">> get error,\", error);\n      });\n  }, [GET_URL]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const queryString = new URLSearchParams(new FormData(e.target)).toString();\n    console.log(\"form submit data:\", queryString);\n    setQuery(queryString);\n  };\n\n  const handleReset = (e) => {\n    e.preventDefault();\n    setAddress('');\n    setCity('');\n    setState('');\n    setZipcode('');\n  };\n\n  return (\n    <>\n      \n        <form className=\"form\" onSubmit={handleSubmit}>\n          <div className=\"form__field\">\n            <label htmlFor=\"address\">Street Address:</label>\n            <input\n              type=\"text\"\n              value={address}\n              onChange={e => setAddress(e.target.value)}\n              className=\"form__input\"\n              id=\"address\"\n              name=\"street_address\"\n              placeholder=\"Ex. 123 Broadway\"\n              aria-required=\"true\"\n              required\n            />\n          </div>\n          <div className=\"form__field\">\n            <label htmlFor=\"address\">City:</label>\n            <input\n              type=\"text\"\n              value={city}\n              className=\"form__input\"\n              id=\"city\"\n              name=\"city\"\n              placeholder=\"Ex. New York\"\n              aria-required=\"true\"\n              required\n            />\n          </div>\n          <div className=\"form__field\">\n            <label htmlFor=\"address\">State:</label>\n            <input\n              type=\"text\"\n              value={state}\n              className=\"form__input\"\n              id=\"state\"\n              name=\"state\"\n              placeholder=\"Ex. NY\"\n              aria-required=\"true\"\n              required\n            />\n          </div>\n          <div className=\"form__field\">\n            <label htmlFor=\"address\">Zipcode:</label>\n            <input\n              type=\"text\"\n              value={zipcode}\n              className=\"form__input\"\n              id=\"zip\"\n              name=\"zip_code\"\n              placeholder=\"Ex. 10047\"\n            />\n          </div>\n          <div className=\"form__field\">\n            <button type=\"reset\" onClick={handleReset} id=\"clearForm\" className=\"form__button\">\n              Clear\n            </button>\n            <button type=\"submit\" className=\"form__button\">\n              Search\n            </button>\n          </div>\n        </form>\n        <div className=\"results\">\n          <pre>{JSON.stringify(results, null, 2)}</pre>\n        </div>\n    </>\n  );\n};\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <SearchContextProvider>\n        <Nav />\n        <main className=\"main\">\n          <SearchForm />\n        </main>\n      </SearchContextProvider>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}